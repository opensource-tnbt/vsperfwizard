# traffic generator to use in tests
TRAFFICGEN = 'TestCenter'
TRAFFICGEN_STC_LAB_SERVER_ADDR = "10.10.120.203"
TRAFFICGEN_STC_LICENSE_SERVER_ADDR = "10.10.120.202"
TRAFFICGEN_STC_EAST_CHASSIS_ADDR = "10.10.120.206"
TRAFFICGEN_STC_EAST_SLOT_NUM = "1"
TRAFFICGEN_STC_EAST_PORT_NUM = "1"
TRAFFICGEN_STC_EAST_INTF_ADDR = "192.85.1.3"
TRAFFICGEN_STC_EAST_INTF_GATEWAY_ADDR = "192.85.1.103"
TRAFFICGEN_STC_WEST_CHASSIS_ADDR = "10.10.120.206"
TRAFFICGEN_STC_WEST_SLOT_NUM = "1"
TRAFFICGEN_STC_WEST_PORT_NUM = "2"
TRAFFICGEN_STC_WEST_INTF_ADDR = "192.85.1.103"
TRAFFICGEN_STC_WEST_INTF_GATEWAY_ADDR = "192.85.1.3"
TRAFFICGEN_STC_VERBOSE = "True"

TRAFFICGEN_STC_RFC2544_METRIC="throughput"

# Traffic COnfiguration.
TRAFFICGEN_STC_TEST_SESSION_NAME = "rfc2544Tput"
TRAFFICGEN_STC_CSV_RESULTS_FILE_PREFIX = "RFC2544_tput"
TRAFFICGEN_STC_NUMBER_OF_TRIALS = "1"
TRAFFICGEN_STC_TRAFFIC_PATTERN = "PAIR"
TRAFFICGEN_STC_TRIAL_DURATION_SEC = "60"
TRAFFICGEN_STC_SEARCH_MODE = "BINARY"
TRAFFICGEN_STC_LEARNING_MODE = "AUTO"
TRAFFICGEN_STC_RATE_LOWER_LIMIT_PCT = "99.0"
TRAFFICGEN_STC_RATE_UPPER_LIMIT_PCT = "99.0"
TRAFFICGEN_STC_RATE_INITIAL_PCT = "99.0"
TRAFFICGEN_STC_RATE_STEP_PCT = "10.0"
TRAFFICGEN_STC_RESOLUTION_PCT = "1.0"
TRAFFICGEN_STC_FRAME_SIZE = "64, 128, 256, 512, 1024, 1518"
TRAFFICGEN_STC_ACCEPTABLE_FRAME_LOSS_PCT = "0.0"
#TRAFFICGEN_STC_PYTHON2_PATH = "/usr/bin/python3.3"
TRAFFICGEN_STC_RFC2544_TPUT_TEST_FILE_NAME = "testcenter-rfc2544-rest.py"
# DPDK target used when builing DPDK
RTE_TARGET = 'x86_64-native-linuxapp-gcc'
WHITELIST_NICS = ['02:00.0', '02:00.1']
TRAFFICGEN_PKT_SIZES = (64, 128, 256, 512, 1024, 1280, 1518)
# OVS_VAR_DIR = '/var/run/openvswitch/'

# OVS_ETC_DIR = '/etc/openvswitch/'

#VSWITCH_DIR = os.path.join(ROOT_DIR, 'vswitches')
#
############################
## VNF configuration
##############################
#GUEST_IMAGE = ['/home/opnfv/vloop-vnf-ubuntu-14.04_20160823.qcow2']
#
GUEST_IMAGE = ['/home/opnfv/vloop-vnf-ubuntu-14.04_20160823.qcow2']
VSWITCH_BRIDGE_NAME = 'vsperf-br0'
## release 10GB NICs from DPDK so Vanilla OVS tests can see them
import subprocess
import os
##subprocess.call('sudo bash -c "echo 8192 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages"', shell=True)
##subprocess.call('sudo bash -c "echo 8192 > /sys/devices/system/node/node1/hugepages/hugepages-2048kB/nr_hugepages"', shell=True)
##subprocess.call('sudo bash -c "echo 0 > /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages"', shell=True)
##subprocess.call('sudo bash -c "echo 0 > /sys/devices/system/node/node1/hugepages/hugepages-1048576kB/nr_hugepages"', shell=True)
TMP_BIND_TOOL = os.path.join(PATHS['dpdk']['src']['path'], PATHS['dpdk']['src']['bind-tool'])
subprocess.call('sudo ' + TMP_BIND_TOOL + ' -u ' + ' '.join(WHITELIST_NICS), shell=True)
subprocess.call('sudo ' + TMP_BIND_TOOL + ' -b ixgbe ' + ' '.join(WHITELIST_NICS), shell=True)
#
#
